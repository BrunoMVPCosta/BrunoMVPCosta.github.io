<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>throw new exception();</title>
    <description>Blog about scalable software, personal opinion on software design and remember... throw a new exception once in a while.
</description>
    <link>http://thrownewexception.com/</link>
    <atom:link href="http://thrownewexception.com/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 15 Feb 2016 17:55:28 +0000</pubDate>
    <lastBuildDate>Mon, 15 Feb 2016 17:55:28 +0000</lastBuildDate>
    <generator>Jekyll v3.1.1</generator>
    
      <item>
        <title>Consumer-driven contracts with Pact</title>
        <description>&lt;p&gt;Microservices, here they are and they are to stay. When using a microservice architecture, theory says, we get a more flexible system. It’s easier to deploy, because instead of release the whole system, as in a monolithic application, we can release small pieces of the system independently. We get hardware flexibility, because we may need different hardware specification for different pieces of the system. We get programming flexibility, because we can have a service using C# with WebAPI and another using Node.js. The flexibility is wonderful and it all sounds great; however, our ability to release the services independently is more often than not restricted by the dependencies between services.
To evolve to microservices architecture smoothly, we need continuous delivery. This is very important for several reasons, for example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Reliable releases&lt;/b&gt;, considering that we are reducing the size of what we are releasing, the risk associated with the release is lower than in a monolithic application. Since, the deployment’ scripts need to run and be tested several times before the code goes to production, most of the issues with the process of deployment are detected in this phase. In the end, we will get a automated process that we can trust.&lt;/li&gt;
  &lt;li&gt;With reliable releases, we can &lt;b&gt;release often&lt;/b&gt;. The sooner we go to the market the sooner we get customer feedback to improve our product.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;Improving our product sooner&lt;/b&gt;, based on customer’s feedback, we will increase customer satisfaction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And… all of that will give us more money. We hope…&lt;/p&gt;

&lt;p&gt;But, lets talk about microservice and dependencies again, as example, imagine we’re creating an ecommerce using microservices architecture and we have the Catalog Service and the Inventory Service. They communicate using REST.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://thrownewexception.com/images/cdc1.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Later, we got a new requirement from the order management system, saying that they need to have the warehouse location of the stock. We will need to change our API as follow.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://thrownewexception.com/images/cdc2.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now, we have two consumers depending on the Inventory Service. If we are not wise, there are a lot of ways to the Catalog Service or OMS be broken by changes made on the Inventory Service. For example, we may need to replace the warehouse property and return a object instead of string.&lt;/p&gt;

&lt;p&gt;There are techniques to prevent us from breaking up things&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;b&gt;Coupled releases&lt;/b&gt;: We can release OMS, Catalog Service and Inventory Service simultaneously. This way we are sure we will not break the interactions between those services, because they’ll all be updated at the same time. But with the system growing and with the number of dependencies not going down, it is easy to understand it will be very hard to maintain.&lt;/li&gt;
  &lt;li&gt;&lt;b&gt;End-to-end testing&lt;/b&gt;: I believe this is one of most used solutions to this problem and mainly because is such a QA-friendly solution. Even if it sounds as a decent idea, it quickly becomes a nightmare. The development and maintainability costs associated with these tests are huge. To make the things worse, with all of the dependencies, a test can fail for a lot of different reasons, which leads to mistrust of the team in the tests. When the team distrusts the tests, normally, doesn’t take long for the team to stop maintain and doing tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Considering the pros and cons of the techniques above, we need a better, more flexible solution to evolve the Inventory Service API and be sure that a change on the API is not harmful to a unmodified version of the OMS or Catalog Service. And here comes the Customer-Driven Contracts pattern.&lt;/p&gt;

&lt;h3&gt;Consumer-Driven Contracts&lt;/h3&gt;

&lt;p&gt;Consumer-Driven Contracts is a pattern that allows the consumer to define an expected behavior from a service (provider). Then, both the consumer and the provider agrees on the contract. Finally, the provider can get that specification and validate that it does indeed meet the expectations of his consumers.&lt;/p&gt;

&lt;p&gt;That said, it’s easy to see the advantages of such approach in a microservices architecture, but how should we do the validation and how does the consumer defines an expected behavior… this is where Pact comes in!&lt;/p&gt;

&lt;h3&gt;What is pact? &lt;/h3&gt;

&lt;p&gt;Pact is a library that enables Consumer-Driven Contract testing.&lt;/p&gt;

&lt;p&gt;Pact will be present both on the consumer and on the provider, because we are replacing a synchronous communication with an mediator named Pact. The mediator will receive from the consumer the HTTP request it will make to the provider and the HTTP response it is expecting from it. As a good mediator that pact are, it will use these expectations and create a mock service to simulate the provider service. It will record all the interactions between the consumer and the mock service to a json file that, will be used by the provider. So, the consumer sends the information to the mediator that he will need from the provider. Later, the mediator will give the json file to the provider showing him the expectations from the consumer. To validate that the provider does actually provide the response the consumer is expecting, the mediator will replay the interactions with the consumer he recorded.&lt;/p&gt;

&lt;h3&gt;Overview&lt;/h3&gt;

&lt;p&gt;Using the same example as before, we can remove the need of the Inventory Service and replace it using Pact.&lt;/p&gt;

&lt;p&gt;So, the first step should be communication between us and someone responsable for the provider service so we can both agree on a contract based on our needs and what the provider is already exposing or not.&lt;/p&gt;

&lt;p&gt;The second step is to define consumer expectations on the Catalog Service. It may feel weird to create the code we are expecting from the provider and not use the provider instead, but doing so has some advantages that we will talk in a bit.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://thrownewexception.com/images/cdc4.jpg&quot; alt=&quot;Step 2 - Define consumer expectations&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After that, we did all we had to do. It’s responsibility of the provider to ensure that these contracts are met and never broken.
So, the third step is to validate that the contracts between the consumer and the provider are valid.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://thrownewexception.com/images/cdc5.jpg&quot; alt=&quot;Step 3 - Verify expectations on provider&quot; /&gt;&lt;/p&gt;

&lt;h3&gt;Isn&#39;t it the same as end-to-end testing?&lt;/h3&gt;

&lt;p&gt;Short answer, no.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;We don’t need all the system to be running&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;With this solution, we are validating that there is no API breaking changes and the dependencies between the services are working as it should, without the need of multiple services running at the same time. Starting multiple services and managing dependencies on the deployment is a non-trivial thing to do and takes time. We can verify the same thing without all of this overhead.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Change is inevitable&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Our experience tell us that change is inevitable and all the APIs will change. If we don’t know who is using our service and how is it using, we don’t feel good about change, because we will be afraid of breaking something. With pact, the provider will know how the others services are using his API and he will be more comfortable to change things, because the interactions between consumers and providers will always be validated.&lt;/p&gt;

&lt;p&gt;&lt;i&gt;Change is inevitable. Change is constant.&lt;/i&gt; - Benjamin Disraeli&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Fast feedback is everything&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The execution of the tests is faster than in a traditional end-to-end testing. And we all know our lifes are a loop of edit-compile-test… &lt;a href=&quot;http://www.joelonsoftware.com/articles/fog0000000023.html&quot;&gt;as Joel Spolsky said&lt;/a&gt;: &lt;i&gt;…the faster the Edit-Compile-Test loop, the more productive you will be…&lt;/i&gt;&lt;/p&gt;

&lt;h3&gt;In Conclusion&lt;/h3&gt;

&lt;p&gt;Consumer-Driven Contract pattern is amazing to improve our organization productivity. Being able to verify contracts at build time without the need of start up a bunch of services and their dependencies, saves us money, time and helps us to stay sane. With the confidence it gives us on the deployment process, our organization will release more often, sooner and improve our users experience sooner.&lt;/p&gt;

&lt;p&gt;Remember… fast feedback is everything. We are just enabling it. For us, for our organization and our business.&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://thrownewexception.com/2016/02/09/consumerdriven-contracts-with-pact.html</link>
        <guid isPermaLink="true">http://thrownewexception.com/2016/02/09/consumerdriven-contracts-with-pact.html</guid>
        
        <category>consumer-driven-design</category>
        
        <category>pact</category>
        
        <category>continuous delivery</category>
        
        
      </item>
    
      <item>
        <title>Not every if--then-else statement, needs the	 else</title>
        <description>&lt;p&gt;As a software engineer, I have the opportunity to review a lot of code from other engineers. One thing that makes me happy is that the number of people doing a defensive code is growing, but there is still room for improvement.&lt;/p&gt;

&lt;p&gt;One thing that amuses me is the quantity of people doing the following piece of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;divisor&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Divide by zero is not allowed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First the good things. The developer is doing a defensive code, validating the input arguments and throwing an informative exception.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;But, do we really need the else statement here? &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The if-then-else statement exists to perform some action based on a condition. If the condition is true, the statements following the “then” are executed, otherwise it will continue to the “else” block and after this brach we’ll have an “interception” point on the flow. However, one of our branches is an exit point, we don’t want an interception happening after the “if-then-else” statement, we want the code to exit the method if the first condition is true.&lt;/p&gt;

&lt;p&gt;Resuming, no, we don’t need the else there. &lt;b&gt;Not every if-then-else statement, needs the else,&lt;/b&gt; changing our code to remove the unnecessary else the code will looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;divisor&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Divide by zero is not allowed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;But, its just a detail…&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;At first, this seems to be just a little thing that doesn’t really matter, but what if we add more and more logic into the code without refactoring it? Have you thought about the maintainability problem that we might have in the future?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Where is this coming from?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I have a theory about why developers are still doing this. When learning how to program, we normally are taught the if-then-else statement before any learning on defensive code. As we practice our skills, we are doing more and more if-then-else statements until it becomes intrinsic in our brain and we do it without thinking. The problem is that we need to think to write a clean code.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How can we stop doing it?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Everytime you have a code review, or change some code from another engineer, please check for code like this and alert your colleague for this. He will be grateful.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2015 01:00:42 +0100</pubDate>
        <link>http://thrownewexception.com/coding/2015/04/03/stop-doing-if-return-else.html</link>
        <guid isPermaLink="true">http://thrownewexception.com/coding/2015/04/03/stop-doing-if-return-else.html</guid>
        
        <category>clean-code</category>
        
        
        <category>coding</category>
        
      </item>
    
      <item>
        <title>The art of coding</title>
        <description>&lt;p&gt;Have you ever felt it’s really hard to explain what a software engineer does for a living? Have you ever felt you were boring someone explaining what a software engineer does? If you have answered yes to any of the questions, join the club.&lt;/p&gt;

&lt;p&gt;When I started studying computer engineering, here in Portugal, not everyone had a personal computer and a lot of people not much older than me, had real issues working with computers. For example, they didn’t know how to turn on the computer. Yeah! That much.&lt;/p&gt;

&lt;p&gt;Back on those days, trying to explain to a friend, what I was studying was hard, not only because I had no idea what software engineering really was, but also, because &lt;a href=&quot;https://www.reddit.com/r/AskMen/comments/1wxzkx/why_does_programming_have_so_many_negative/&quot;&gt;programming has so many negative stereotype&lt;/a&gt; and for a bunch of reasons, a lot of people just don’t enjoy to be around a software engineer or someone with a nerdy personality. I felt that people that didn’t know me that well, looked at me differently after I told them what I was studying and I sincerely believe it was because of the stereotypes around software engineers. Those stereotypes create a barrier on the communication between people and you need more time to get the “normal” look from those people again.&lt;/p&gt;

&lt;p&gt;I feel sad about it, but I think it doesn’t have to do with the other person, but we cannot find an expression to transform software development in a non-boring activity. Let’s be honest, you have plenty of cool TV shows about doctors (House, Grey Anatomy, etc), about lawyers (Suits, How to get away with murderer, etc), about detectives, policemen, etc. But about software engineering we don’t have much and the ones that exist, I think only software related staff watches them. It’s boring.&lt;/p&gt;

&lt;p&gt;If it’s hard for someone as creative as a TV shows writer, how to answer the question with some glamour and creativity?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What do we do for living?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;We are software engineers. Some of us create apps, others backend services to support those apps or websites. Think about Facebook, Skype, Twitter, Linkedin, etc… millions of people using their technology day after day. Isn’t it amazing? Does it look boring? Changing people’s life. Changing the world. Changing the way people communicate. Changing the way people buy. Writing code is an art. It might not be a one-man show as it is creating a new piece of melody or writing a book, but it is art. Art created by one or millions of software engineers.&lt;/p&gt;

&lt;p&gt;Again, think about Facebook, Skype, Twitter, Linkedin, etc… Millions of unknown artists… giving you art, everyday.&lt;/p&gt;

&lt;p&gt;Does it sound boring? I don’t think so.&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Apr 2015 01:00:42 +0100</pubDate>
        <link>http://thrownewexception.com/coding/2015/04/01/the-art-of-coding.html</link>
        <guid isPermaLink="true">http://thrownewexception.com/coding/2015/04/01/the-art-of-coding.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
  </channel>
</rss>
