<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2024-04-27T16:31:23+01:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">thrownewexception();</title><subtitle>[`@brunomvpcosta`{:rel=&quot;me&quot;}](https://twitter.com/brunomvpcosta)&apos;s internet little corner to write about scalability, architecture, software and more stuff.
</subtitle><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><entry><title type="html">Bridging the Gap: How to Communicate Complex Tech Ideas to Non-Technical Audiences</title><link href="http://localhost:4000/tech-ideas-to-non-tech-people" rel="alternate" type="text/html" title="Bridging the Gap: How to Communicate Complex Tech Ideas to Non-Technical Audiences" /><published>2024-04-27T00:00:00+01:00</published><updated>2024-04-27T00:00:00+01:00</updated><id>http://localhost:4000/tech-ideas-to-non-tech-people</id><content type="html" xml:base="http://localhost:4000/tech-ideas-to-non-tech-people"><![CDATA[<p>So, you have a killer feature or an amazing idea for your company, but explaining it to your boss or the marketing team is like explaining rocket science to a 4 year old?</p>

<p>The struggle is real. Throughout my career, I have experienced this myself, I have witnessed great engineers struggle to explain an idea to someone non-technical or even to a tech executive and I have also witnessed great people doing it seamlessly.¬†</p>

<p>It‚Äôs something that even more experienced engineers can struggle with. I remember having conversations with director-level ICs where they said ‚ÄúIt would be much easier to just trust us to do the work‚Äù. It would probably be easier to move forward, not necessarily in the direction the company needs, though.</p>

<p>So, today I give some tips to reduce the tech talk gap and ensure everyone‚Äôs on the same page.</p>

<p><strong>Ditch the jargon</strong>¬†</p>

<p>We engineers love our acronyms and technical terms, but to the uninitiated, they sound like gibberish. Instead of ‚ÄúAPI integration,‚Äù explain it as ‚Äúconnecting our app to other services.‚Äù</p>

<p><strong>Think of analogies</strong></p>

<p>People understand everyday things. Explain a complex topic by comparing it to a recipe or a decision tree. For instance, to explain how a firewall works we can use something like ‚Äúthink of a security at a nightclub. The security guard checks people and allows only guests with invitation to enter the club. Similarly, the firewall checks incoming data (people) and only allows authorized data (guests with invitation) to enter the network (club)‚Äù.</p>

<p><strong>Focus on Benefits, Not Mechanics</strong></p>

<p>Your audience doesn‚Äôt care how the internals work, they care about where it takes them. Explain the ‚Äúwhat‚Äù and ‚Äúwhy‚Äù of your tech concept. Instead of ‚ÄúWe‚Äôre implementing a new caching system,‚Äù say ‚ÄúThis will make the app load lightning fast, giving users a smoother experience.‚Äù</p>

<p><strong>Keep it Simple (and Short)</strong></p>

<p>Attention spans are limited, especially for executives. Avoid too much information. Break down complex concepts into manageable pieces and concentrate on the most important lessons.</p>

<p><strong>Check for Understanding</strong></p>

<p>Communication is a two-way street. Don‚Äôt just <strong>deliver</strong> the message, <strong>have a conversation</strong> with them. Leverage visual support like flowcharts or other diagrams and ask questions to ensure your message is being received. If they look at you like you‚Äôre an ET, you may need to adapt your approach.</p>

<p><strong>Bonus tip: Tailor your message to the audience.</strong></p>

<p>If you are explaining adding a caching system to a product manager, you may want to highlight the smother user experience and higher conversation rates. Explaining the same topic to someone moving close to finance, you may want to highlight the cost savings and the revenue growth of this solution.</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><summary type="html"><![CDATA[Stuck translating tech jargon? Learn how to communicate clearly and use creative analogies to convey difficult technical ideas to non-technical audiences]]></summary></entry><entry><title type="html">Redis gave up on their key value</title><link href="http://localhost:4000/redis-gave-up-on-their-key-value" rel="alternate" type="text/html" title="Redis gave up on their key value" /><published>2024-03-27T00:00:00+00:00</published><updated>2024-03-27T00:00:00+00:00</updated><id>http://localhost:4000/redis-gave-up-key-value</id><content type="html" xml:base="http://localhost:4000/redis-gave-up-on-their-key-value"><![CDATA[<p>First things first, the title is from the amazing joke Erik Bj√§reholt did on X (ex-twitter).¬†</p>

<center>
  <blockquote class="twitter-tweet" data-dnt="false">
    <p lang="en" dir="ltr">Redis is no longer open source?<br />I guess they gave up on their key values ü•Å</p>
    &mdash; Erik Bj√§reholt (@ErikBjare) 
    <a href="https://twitter.com/ErikBjare/status/1771474971564318842?ref_src=twsrc%5Etfw">March 23, 2024</a>
  </blockquote>
  <script async="" src="https://platform.twitter.com/widgets.js" charset="utf-8"></script> 
</center>
<p>So, Redis adopts dual source-available licensing. But what does it mean?</p>

<p>We all know that we can use Redis on AWS, Azure, and Google Cloud. Probably in different clouds as well, but I‚Äôm talking about ‚Äúreal‚Äù clouds ‚Äì just kidding Oracle, please don‚Äôt sue me.¬†</p>

<p>This is convenient for us, the users, but not so much for the company, or at least, the company doesn‚Äôt think it‚Äôs good for them. As a result, companies with open-source products, look for alternatives to protect their IP from being monetized by big cloud providers.¬†</p>

<p>A typical move is to move their license to a dual source-available license. <a href="https://www.elastic.co/pricing/faq/licensing">Elasticsearch</a> did it in the past, and now it‚Äôs Redis‚Äô turn to do the same. But what is dual source-available licensing? Dual source-available licensing typically means that it is released under two different licenses, one of which is an open-source license and the other is a proprietary or more restrictive license.¬†</p>

<p>One question I asked on X was how did it affect the revenue and customers.¬†</p>

<center>
  <blockquote class="twitter-tweet" data-dnt="false">
  <p lang="en" dir="ltr">Redis adopts dual source-available licensing. 
      <br /><br />Is there any public available research to understand the impact in the revenue of the company that made these decisions in the past? Did it increase or decrease?
      <br /><br />And how about the providers? Did the cost move to the clients?
    </p>&mdash; Bruno Costa (@brunomvpcosta) 
    <a href="https://twitter.com/brunomvpcosta/status/1770788756104036617?ref_src=twsrc%5Etfw">March 21, 2024</a>
  </blockquote>
</center>

<p>While we can‚Äôt say anything about Redis Labs yet, we can look at MongoDB and Elasticsearch to understand the revenue impact.</p>

<h3 id="elasticsearch">Elasticsearch</h3>

<p>January 2021, Elasticsearch <a href="https://www.elastic.co/blog/why-license-change-aws">announced</a> that the license would be moving from the Apache 2.0-licensed source code to be dual licensed under both the Elastic License and SSPL.¬†</p>

<p>Did it impact their revenue? If we look at their <a href="https://www.investing.com/equities/elastic-financial-summary">balance sheet</a> we can see they continued to grow their revenue from 2021 ($608M) until 2023 (1.07B).¬†</p>

<p><img src="../../assets/img/posts/2024.03.27/revenue-es.png" alt="&quot;Elastic Revenue&quot;" /></p>

<p>The revenue doesn‚Äôt seem to have been impacted.</p>

<p>Did it affect customers? It is not easy to evaluate it without deeper investigation, but it seems AWS and Elasticsearch had their disagreements regarding the technology, but eventually, they <a href="https://www.elastic.co/blog/elastic-and-amazon-reach-agreement-on-trademark-infringement-lawsuit">reached an agreement</a>. That means that customers using AWS to use Elasticsearch are in fact using Elastic Cloud ‚Äì customers can choose to use OpenSearch from AWS which is a fork from the Elasticsearch codebase. From what I could gather from the Elasticsearch <a href="https://discuss.elastic.co/t/difference-between-using-elastic-cloud-aws-and-using-elastic-from-aws-marketplace/320898/2">forum</a> there is no difference between using the Elastic Cloud directly or using it through the AWS marketplace.</p>

<h3 id="mongodb">MongoDB</h3>

<p>In 2018, <a href="https://www.mongodb.com/legal/licensing/server-side-public-license">MongoDB changed its license to Server Side Public License</a> to prevent the same issue as Elasticsearch. They had multiple providers in Asia leveraging their technology to provide MongoDB as a service, but without contributing back to the community.</p>

<p>Back then, their revenue was $115M, and fast-forward to 2023, their <a href="https://www.macrotrends.net/stocks/charts/MDB/mongodb/revenue">revenue</a> is now $1,284B.</p>

<p>The business model is very similar to Elasticsearch, they have a cloud offer where they offer MongoDB-as-a-service. Cloud providers like AWS have their ‚ÄúAPI-compatible‚Äù MongoDB alternative, but MongoDB revenue is still growing YoY.</p>

<h2 id="conclusion">Conclusion</h2>
<p>The change appears to be good for companies, without really impacting customers. Perhaps we are witnessing the transformation of open-source businesses adapting to the AWS business model of taking advantage of their goodwill.</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><summary type="html"><![CDATA[Redis adopts dual source-available licensing, but what does it mean?]]></summary></entry><entry><title type="html">QA role evolution</title><link href="http://localhost:4000/qa-role-evolution" rel="alternate" type="text/html" title="QA role evolution" /><published>2024-03-26T00:00:00+00:00</published><updated>2024-03-26T00:00:00+00:00</updated><id>http://localhost:4000/qa-role-evolution</id><content type="html" xml:base="http://localhost:4000/qa-role-evolution"><![CDATA[<p>Samuel was driving to work, still sleepy and not in a very good mood. It was a sunny morning, a beautiful sky, but not even that could reduce the anxiety he was feeling. The last release went wrong, some issue with the back office features was preventing the partners from publishing ads and affecting not only their sales but also their relationship with partners. He always understood the importance of quality in software and how it impacts customer attrition and brand reputation.¬†</p>

<p>While waiting for the green light, his thoughts went to when he started working. He started in a small company that did software business. They didn‚Äôt have a QA process. When he suggested a dedicated person to do QA, his boss mocked him: ‚ÄúOne person to just do tests? Are you serious? I think you can do it because the effort is not that much, just a few clicks.‚Äù This statement stayed with him for the rest of his career until this day. While he was thinking about it, he was considering his previous boss‚Äôs perspective. It wasn‚Äôt entirely wrong, but not right either.¬†</p>

<h2 id="the-first-company">The first company</h2>

<p>His thoughts were still at that company. What had gone so wrong with the quality? Good engineers were working for them, management wasn‚Äôt completely bad, and had some good previous experience in successful companies, why didn‚Äôt they succeed at quality?¬†</p>

<p>They were creating a new version of the product from scratch, which was common practice for companies at the time. They worked for months on the requirements and planning. Everything was perfect - it wasn‚Äôt but project management is not the focus here. When they started to have customers using the beta version of the software, the number of issues was so high that they spent more time trying to fix things than finishing the project. They didn‚Äôt have any quality process in place, the process was changing the code and pushing it to production, sometimes even during a call with the customer.¬†</p>

<p>Living this reality makes people more sensible about the quality topic. He didn‚Äôt want to spend more time trying to fix issues in production than adding value to the customer.¬†</p>

<h2 id="back-to-thrownewexceptioncom--how-it-started">Back to thrownewexception.com ‚Äî how it started</h2>

<p>From the very beginning he joined the company, he insisted on having quality assurance. They started an area that was dedicated to making sure the software had the right quality for the customer. They hired a first QA, and it was amazing the amount of bugs found. Even in production.¬†</p>

<p>Samuel was entering the building and greeting people while thinking about it and noticing how much everything had changed. Without noticing he was smiling near the coffee machine, remembering the dynamic change that happened with the first QA engineer at the company finding bugs and the reaction of the other engineers. Engineers were not used to that interaction, but luckily they had found a QA with good soft skills that could relate well to them and soften the situation. The other engineers used to make jokes using Schr√∂dinger‚Äôs cat analogy, saying that the QA created the bug by opening the box.</p>

<p>The quality process at the time was done at the end of the project. The team(s) built the feature(s) and then QA would understand the requirements, create some user acceptance testing, and validate if the software was ready for release. It was slightly agile because the engineers were ready to help the QA team document the user acceptance testing and fix the issues they found. The collaboration was good.</p>

<h2 id="thrownewexceptioncomadopting-scrum">thrownewexception.com‚ÄîAdopting SCRUM</h2>

<p>The teams started adopting SCRUM to manage their work and one of the first challenges was how to coordinate the QA work with the Devs‚Äô work. It was decided to add a stage on the scrum board, called ‚ÄúTest‚Äù. The developer would write the code, and after it was ready the card was moved to the ‚ÄúTest‚Äù column and the QA would validate if the feature was correctly implemented.</p>

<p><img src="../../assets/img/posts/2024.03.26/figure-1-process.png" alt="&quot;The scrum process&quot;" /></p>

<p style="text-align: center;"><em>Figure 1 - The process</em></p>

<p>After a while‚Äînot long, actually‚Äîwe started noticing that the QA was without much work to do at the start of the sprint and then, when the end of the sprint approached, they had a lot of tasks to validate and more often than not, the team would miss the sprint goals because it was unable to validate all the tasks.¬†</p>

<h2 id="thrownewexceptioncom--quality-week-">thrownewexception.com ‚Äî Quality week üí°</h2>

<p>After some consideration, the leadership decided to have the QA perform the validation of the items from the previous sprint in the first week of the sprint.¬†</p>

<p><img src="../../assets/img/posts/2024.03.26/different-stream-qa.png" alt="&quot;Two streams, one for the team and another for the QA&quot;" /></p>

<p style="text-align: center;"><em>Figure 2 - The QA with a different stream
  than the devs</em></p>

<p>It means the QA has a different stream from the devs during one week. When some items were in Test at the end of the sprint, the QA would replicate that to the QA Stream and ensure it got validated in the right order. After all the items from the sprint were validated, the team would release the product to the client.</p>

<p>This solved the issue of putting too much pressure on the QA at the end of the sprint, but the overall speed and throughput of the team didn‚Äôt improve. In fact, Hannah, the scrum master, showed that the speed was declining. ‚ÄúThe reason for this trend may be explained by the need to go back and fix bugs. The team has too much context switch, and it may be impacting the speed.‚Äù ‚Äîsaid Hannah. She continued, ‚ÄúI‚Äôd suggest trying to have a releasable product by the end of the sprint instead. Maybe we can keep the two weeks sprint, but have one week to work and another week to stabilize the product to release it‚Äù. We adopted Hannah‚Äôs suggestion.</p>

<p>The amount of work the team committed to at the beginning of the sprint was reduced, and it helped complete everything during the sprint. But the feeling was that we had a ‚Äúsmall waterfall‚Äù, where the developers spend a week writing code and the QA spends the next week testing it. The team got more consistent in the amount of stories delivered, but the process wasn‚Äôt the best.¬†</p>

<h2 id="thrownewexceptioncom--mindset">thrownewexception.com ‚Äî Mindset</h2>

<p>The QA was considered to be the person that would approve the change. A quality gate. The expectation of having one QA validating the work of four or more developers was too optimistic. If the goal was to achieve the sprint goal, wouldn‚Äôt it be better to leverage the entire team?</p>

<p>After a long and, sometimes stressful session of retrospective and brainstorming, the team decided it would make sense to change the mindset. The QA can‚Äôt be the ‚Äúsole responsible for the quality‚Äù said an engineer ‚ÄúWe must all take responsibility for it‚Äù. <strong>Shared responsibility</strong> was the concept of the day and, after that session, any member of the team would be ready to pick up the task in the test column and validate if it was working correctly.</p>

<p>But Julia, the QA, was confused. ‚ÄúHow will the team know what to test?‚Äù. Excellent question.¬†</p>

<p><img src="../../assets/img/posts/2024.03.26/figure-3-ask-for-help.png" alt="&quot;The engineer asking for help&quot;" /></p>

<p style="text-align: center;"><em>Figure 3 - QA trying to get help from Devs focused on their sprint</em></p>

<h2 id="thrownewexceptioncom--today">thrownewexception.com ‚Äî Today</h2>

<p>Weeks went by and Julia approached Enzo in the coffee machine. ‚ÄúI‚Äôm loving this new way of working. I have much more time to do other things that have much more impact than validating each story individually. I feel like a partner for the developers instead of validating their work and I can work closely with the product team to understand the clients, help them anticipate risks, and explore our product in production‚Äù.¬†</p>

<p>Enzo was tremendously happy to hear that, but then he asked her: ‚ÄúAre you aware of the incident we had in our last release? What could we have done to avoid it?‚Äù</p>

<p>Julia told him it was a mistake following the regression testing procedure, a validation was missed, and it led to an issue going to production that affected our clients.</p>

<p>‚ÄúWhat can we do to prevent it?‚Äù ‚Äî asked Enzo.</p>

<p>‚ÄúWell, I have an idea. Have you heard about testing automation?‚Äù</p>

<h2 id="thrownewexceptioncom--automation-">thrownewexception.com ‚Äî Automation ü§ñ</h2>

<p>‚ÄúWith automation, we can release our product to our clients immediately with confidence‚Äù‚Äîsaid Julia to the team, ‚Äî ‚ÄúAnd we can even validate some parts in production.‚Äù.</p>

<h2 id="conclusion">Conclusion</h2>

<p>‚ÄúAsking Julia to validate quality at the end of the sprint is like asking to validate we had good quality construction materials after building the house. Wouldn‚Äôt it be better aiming to prevent defects before they happen?‚Äù</p>

<p>As our industry evolved, our approach to quality also evolved. In the past, it was expected after an engineer finished their work to deploy the changes in an environment, update the card in JIRA, and wait for the QA to validate its changes or return the ticket with bugs. More often than not, the QA would have some doubts and ask the engineer about it before opening a bug to be fixed‚Äîor return the ticket with these issues. If the process doesn‚Äôt feel very different from what you are used to, don‚Äôt worry, a lot of companies still do software development like this. But for the most innovative tech companies, a process like this is long gone.¬†</p>

<h4 id="why">Why?</h4>

<p>This process‚Äôs biggest challenge is preventing a bottleneck without hiring more QA to do the job.</p>

<blockquote>
  <p>The first thing we did was make QA part of engineering. In the ‚Äúold world‚Äù, an engineer would finish their work, check into their branch, update a ticket, and let the QA know it was ready for review. The QA would take this ticket a day or two later, review it, and reopen the ticket if they found issues. This was a long delay.</p>
</blockquote>

<blockquote>
  <p>We made a quiet, unofficial, change where all SDETs built production software as well, and all software engineers became responsible for testing their own code. Now we no longer had to wait days for feedback before shipping the code to production. However, the bi-weekly sprints and the numerous Scrum rituals became the next problem.</p>
</blockquote>

<p>These quotes are from <a href="https://blog.pragmaticengineer.com/project-management-at-big-tech/">this amazing</a> article authored by <strong>Gergely Orosz</strong>. This story is already long enough, but if you want to get insights from within those companies, read the article from Gergely Orosz.</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="company-tale" /><summary type="html"><![CDATA[Evolution of QA in thrownewexception.com company tale: from manual testing to better approach]]></summary></entry><entry><title type="html">From Gatekeepers to Enablers</title><link href="http://localhost:4000/gatekeepers-enablers" rel="alternate" type="text/html" title="From Gatekeepers to Enablers" /><published>2022-01-29T00:00:00+00:00</published><updated>2022-01-29T00:00:00+00:00</updated><id>http://localhost:4000/gatekeepers-enablers</id><content type="html" xml:base="http://localhost:4000/gatekeepers-enablers"><![CDATA[<p>Linkedin <a href="https://www.usenix.org/system/files/login/articles/login_winter18_02_purgason.pdf">described five stages of SRE</a> , the second one being the <strong>gatekeeper</strong>.</p>

<blockquote>
  <p>As we grow past the first generation of firefighters, we achieve a basic level of operational integrity. The active operational fires are put out, and we have an increasing amount of time available for forward-looking tasks. So where do we go from here? The natural instinct is a protective one. We just spent years digging ourselves out of a major operational hole and the last thing we want to do is immediately fall back into it. Usually, this translates into a set of behaviors that amount to building a wall around ‚Äúour‚Äù production with a few locked doors and keeping the keys with SRE. <strong>That way, ‚Äúthose‚Äù pesky developers will have to go through ‚Äúus‚Äù before ‚Äútheir‚Äù change can impact ‚Äúour‚Äù prod.</strong></p>
</blockquote>

<p>Gatekeeper is a stage where some companies stay for ages. It is the natural tendency to protect the production system instead of enabling the speed of innovation.</p>

<p>To tell you the difference between Gatekeepers and Enablers, I‚Äôll tell you a story about Enzo and his journey on a fictional company. Chances are, this company is not very different from the company you are working for or have worked for in your career. Let‚Äôs call it thrownewexception.com.</p>

<p>Enzo was asked to be CTO of the mentioned startup company.  During the company‚Äôs initial years, a team called Ops was created and was responsible for maintaining servers, deploying applications, managing databases, and performance-related topics. The model ‚Äú<a href="https://www.stevesmith.tech/blog/you-build-it-ops-runs-it/">you build it, ops runs it</a>‚Äù was adopted to operate the production environment. Every time a team created a new application, a ticket was opened for the ops team to provision a new set of servers for the application, and a binary was shared with the ops team to install it. It was a small company with around 20 engineers, and Enzo was happy with this solution. Still, the business was growing, and new features had been requested by customers, and investment had been made to grow the company and, therefore, the technology department. The CTO was facing new challenges. How to cope with this growth and improve his team‚Äôs efficiency?</p>

<h3 id="a-new-architecture">A new architecture</h3>

<p>After some external advice and internal discussions, the CTO decided to go with a microservice architecture to enable the teams to work autonomously in small components. As microservices started to be adopted, the model ‚Äú<a href="https://www.stevesmith.tech/blog/you-build-it-ops-runs-it/">you build it, ops runs it</a>‚Äù started to put a lot of stress on the Ops team. The engineers were creating a new application every week, requesting new servers, databases, etc., to that team. The tickets appeared at the end of the project, putting even more pressure on the ops team, as they were delaying the delivery of critical projects. To improve it, Ops started a more formal release management process, where teams needed to submit the change request to a group to be analyzed and approved <strong>at the beginning</strong> of each project. This way, the ops team was able to plan the provisioning of those needs, plan the service‚Äôs deployment, and coordinate the release with the business.</p>

<p>Some conflicts between ops and the software engineers started coming up. The process was slow, and it was demotivating the software engineers. But it was helping ops to be more predictable, so all in all, management was happy.</p>

<p>However, two new patterns slowly started to arise, leading to new challenges. The number of incidents started to increase, which increased the scrutiny of the Ops team during the formal release management process and consequently increased the impact on the projects. Alongside this, most of the time, when the on-call ops engineer was called on, they would lack the internal understanding of the system, and they would need to escalate the issue to the delivery team.</p>

<h3 id="you-build-it-you">You build it you‚Ä¶</h3>

<p>Enzo and their team discussed this issue and started to find some explanations for this. Although the ‚Äú<a href="https://www.stevesmith.tech/blog/you-build-it-ops-runs-it/">you build it, ops runs it</a>‚Äù lowered the on-call costs, it had some drawbacks. The incentives for the engineers to be concerned about reliability were minimal since they were not the ones on-call. And the speed of innovation made it almost impossible to share knowledge with the ops teams to properly support the system. The conclusion was clear: the more time they were on this model, the worse it would become until ops would be nothing more than a reverse proxy for the delivery team. To incentivize the delivery team to be concerned about reliability, the CTO decided that the delivery team should be exposed to the production issues more often. A new model was adopted, the ‚Äú<a href="https://www.stevesmith.tech/blog/you-build-it-you-run-it/">you build it, you run it</a>‚Äù model, where teams would be responsible for their services in production.</p>

<p>By making this change, the CTO expected to improve the relationship between the ops and delivery teams, reducing the MTTR and making the delivery team aware of the operational issues. But, looking into the data, the MTTR metric didn‚Äôt decrease as they predicted, it was relatively the same, sometimes even higher.</p>

<p>Samuel, one of the VPs of technology, wanted to understand why this was happening, and he was eager for the next incident. Unfortunately, incidents were quite frequent, so he didn‚Äôt have to wait much. The last time Samuel joined a war room was when one of their biggest clients complained directly to the CEO because of a bug affecting them. It was not normal for him to be directly involved, so people became really concerned about the incident. ‚ÄúSamuel is here; the impact must be tremendous.‚Äù Samuel‚Äôs experience helped him understand that people were surprised to see him there, so he told them that he was there to better understand the process and help if needed.</p>

<p>The symptom was that no comms were being sent to the customers. It was important to fix, and the impact would be small if mitigated within the next half hour. The engineer on-call was updating the service desk member about the status so they could communicate with the business. After just 15 minutes, she understood that all the apps had terminated, and she wanted to restart them to mitigate the issue.</p>

<p>‚ÄúThat would be quick, right?‚Äù - asked Samuel. Mary was confused with the question but replied. ‚ÄúWe are not sure; we must escalate it to the team responsible for the platform. They will need to restart the application on every server.‚Äù</p>

<p>Samuel was intrigued. So the person on-call was not able to mitigate the issue. They needed to escalate the problem to a different team to mitigate it. He then tried to understand if it was common for the on-call engineer to escalate the issue to another team.</p>

<p>‚ÄúAlmost always. We don‚Äôt have access to restart the app, or to scale out or up, or to move traffic, for example. Most of the time, we need the ops team to help us mitigate the problem‚Äù.</p>

<p>The delivery team were expected to run the service in production, but the company didn‚Äôt set them up for success. More often than not, they lacked the tools to mitigate the issues and they would need to escalate the issue to the ops department for mitigation. So, the escalation process was still there, just reversed now.</p>

<h3 id="you-cant-make-an-omelet-without-breaking-a-few-eggs">You can‚Äôt make an omelet without breaking a few eggs</h3>

<p>After sharing his experience with Enzo and his peers, they concluded more change was needed to achieve this goal. Not only should the delivery team be responsible for the application end-to-end, but it should also have the right tools for the job. The ops team started to provide some tools for the delivery team to help them deploy and monitor their apps.</p>

<p>That started to reduce the MTTR because they could follow one of the <a href="https://www.oreilly.com/content/generic-mitigations/">generic mitigations strategies</a>, like rollback, and mitigate the issue when it was related to a code change. But the delivery team was still stressed about the time it took them to deliver a new app and the lack of tools to scale up or scale out without ops approval.</p>

<p>The ops team was accountable for the reliability of the production system and the costs. In their minds, they could not guarantee production stability and low costs with this kind of freedom for the delivery team. Even with these changes, the gatekeeping culture still existed.</p>

<p>Enzo decided then to challenge the ops team on how to move away from gatekeeping to an enabling mentality. Instead of thinking about ‚Äúhow can I control this?‚Äù, they should start thinking about ‚Äúhow can I enable the teams to do their job safely?‚Äù.</p>

<p>This brings us to today‚Äôs reality of this fictional company. A place where the delivery team - now called engineering - has access to the tools they need in a self-service manner, provided by domain experts. A place where the team owns the entire component‚Äôs lifecycle and has the autonomy to improve their day-to-day and their product. A place where autonomy meets productivity by removing cognitive load by providing a great engineering experience for those teams that don‚Äôt need to go deep in the stack. A place where engineers work to have quality and reliability from the start. A place where technology fully enables business agility and compliance needs.</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="company-tale" /><summary type="html"><![CDATA[From Gatekeepers to Enablers. The story of a fictional company‚Äôs SRE journey towards engineering autonomy, more productivity, better compliance and, happiness!]]></summary></entry><entry><title type="html">An imaginary tale of a growing company</title><link href="http://localhost:4000/imaginary-tale-growing-company" rel="alternate" type="text/html" title="An imaginary tale of a growing company" /><published>2022-01-29T00:00:00+00:00</published><updated>2022-01-29T00:00:00+00:00</updated><id>http://localhost:4000/imaginary-tale-growing-company</id><content type="html" xml:base="http://localhost:4000/imaginary-tale-growing-company"><![CDATA[<p>While I was creating a blog post about how to speed up engineering teams to deliver more value to the end-user, a friend of mine shared an idea: linking that story to a different one I was planning to write and taking the opportunity to use the same fictional characters.</p>

<p>I really loved the idea, so I‚Äôve decided to link not only those two stories but also try to create a set of stories for a growing company.</p>

<p>Technology companies tend to grow in different directions, and the stories I will be sharing are related to my personal view on what approach should be taken. I will speak about processes, people, and technology.</p>

<p>The name of the company is thrownewexception.com. It is a technology company, because, well, what company isn‚Äôt nowadays, right? The product is about content, creating content, and selling ads without taking advantage of the users‚Äô data because we respect privacy. The CTO is Enzo, an experienced executive that helped other companies succeed. He hired Samuel as VP of technology, who is helping him set up the company to be recognized as one of the best tech companies to work on.</p>

<p>There will probably be more people joining the story as I write it, but for now, I would like to introduce you to the very first article of the company.</p>

<ul>
  <li><a href="/gatekeepers-enablers">From Gatekeepers to Enablers</a></li>
  <li><a href="/qa-role-evolution">QA role evolution</a></li>
</ul>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="company-tale" /><summary type="html"><![CDATA[This is the tale of my imaginary company. Stay tuned!]]></summary></entry><entry><title type="html">SLI, SLO, SLA explained in a way your kids will understand‚Ä¶ maybe</title><link href="http://localhost:4000/sli-slo-sla-explained" rel="alternate" type="text/html" title="SLI, SLO, SLA explained in a way your kids will understand‚Ä¶ maybe" /><published>2021-08-15T13:00:00+01:00</published><updated>2021-08-15T13:00:00+01:00</updated><id>http://localhost:4000/sli-slo-sla-explained</id><content type="html" xml:base="http://localhost:4000/sli-slo-sla-explained"><![CDATA[<p>If you are reading this, you probably have been in a situation where you had to explain these terms to people that are not familiar with them. But if you haven‚Äôt, I can guarantee that you will. These terms are really simple but at the same time very easy to misunderstand.</p>

<p>I will try to explain the terms first and then use an analogy with football - the real one - that you can use or even help you to find a better analogy to use with the people you interact with.</p>

<p>SLI stands for Service Level Indicator. You can think of it as an indicator you probably already have in the business, a KPI. It is just that, an indicator of something that matters.</p>

<p>SLO stands for Service Level Objective. What is the target of good service you want to provide to your customers? That‚Äôs the goal. It is what you define as good service.</p>

<p>SLA stands for Service Level Agreement. This one is where you agree with someone that your service will not be below that level, or else there will be consequences or penalties. You‚Äôll probably need to provide some kind of restitution for being below that target.</p>

<p>You don‚Äôt want to define an aggressive target for the SLA, you want something that you feel comfortable enough achieving 100% of the time to reduce the number of restitutions you need to give to the customer. The SLA is normally defined by the business, together with legal. SLOs can provide some support to both business and legal to understand how hard, or easy, it will be to achieve the target.</p>

<h2 id="football-to-the-rescue">Football to the rescue</h2>

<p>I will use the football I‚Äôm used to, I don‚Äôt know the rules for American football. In European football, there are some stats you can see for each player, one is the <code class="language-plaintext highlighter-rouge">complete pass %</code>. This indicator is the number of passes that the player did successfully, meaning it went from him to another colleague. As an example, you can see <a href="https://www.infogol.net/en/player/cristiano-ronaldo/1892">Cristiano Ronaldo‚Äôs stats</a>.</p>

<h3 id="the-sli-complete-pass-">The SLI: Complete pass %</h3>

<p>This is the indicator. The number of passes that Ronaldo did successfully to a colleague.</p>

<h3 id="the-slo">The SLO</h3>

<p>Now, imagine you are Ronaldo‚Äôs coach and during your one-on-one, with Ronaldo, you both define the objectives for the next season. During the conversation, you went to the SLI <code class="language-plaintext highlighter-rouge">complete pass %</code> as a way to define the performance level Ronaldo should give to the team. You both align that the <code class="language-plaintext highlighter-rouge">complete pass %</code> should be above 85% for 90% of the matches in the last 30 days. Notice that you define a target, 90% of the times above 85%, and a time window, last 30 days.</p>

<h3 id="the-sla">The SLA</h3>

<p>Let‚Äôs imagine that, when Juventus negotiated the contract with Ronaldo, they both agreed that if <code class="language-plaintext highlighter-rouge">complete pass %</code> was below 85% for 80% of the matches during the previous month, Ronaldo would have to pay a fine of 100.000‚Ç¨.</p>

<hr />

<p>I hope with this you find a good analogy to explain SLI, SLO, and SLAs and if you want to provide feedback and suggest a change on the calculations I did, please leave a comment or DM me on Twitter! Thanks!</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="SRE" /><summary type="html"><![CDATA[Imagine you are in a remote meeting using terms like SLI, SLO, or SLA, and your kid asks you what it means? How would you explain it to them? Or maybe you need to explain it to your boss or a colleague. In this article, I will try to put SLI, SLO, and SLA in a way even your kids would understand... maybe.]]></summary></entry><entry><title type="html">SRE, SRE everywhere</title><link href="http://localhost:4000/sre-sre-everywhere" rel="alternate" type="text/html" title="SRE, SRE everywhere" /><published>2021-08-01T13:00:00+01:00</published><updated>2021-08-01T13:00:00+01:00</updated><id>http://localhost:4000/sre-sre-everywhere</id><content type="html" xml:base="http://localhost:4000/sre-sre-everywhere"><![CDATA[<p>Every once in a while, a new concept appears in the software industry. People start talking about it, making presentations, writing books and even consulting. Everyone seems to be doing the new fancy thing. But even if everyone is talking about it and doing it, are they talking about the same and doing the same?</p>

<p>Today, I will be writing about SRE. It is not a new topic, but it is one that is starting to be adopted more and more across our industry. SRE stands for <strong>Site Reliability Engineering</strong> and aims to improve reliability of software and it was originally created at Google. Ever since Google started to share it externally, other companies started to adopt the concept and doing SRE.</p>

<p>The challenge is understanding what part of SRE they are doing - or if it is SRE at all for the purists. Let‚Äôs explore some of the examples of teams that people associate with SRE.</p>

<h2 id="infrastructure-automation">Infrastructure automation</h2>

<p>Some companies started doing SRE by calling their team responsible for infrastructure automation provision and so on, SRE. Some might argue it is not SRE, but the reality is that predictable and deterministic infrastructure is essential for the reliability of any system. And it might be considered toil, because the alternative would probably be tickets to fix stuff manually.</p>

<h2 id="cicd-and-tooling-for-software-engineers">CI/CD and tooling for software engineers</h2>

<p>One thing that I noticed as well is that some companies are using the term SRE in the teams that are working on CI/CD pipelines, frameworks or other tooling for the software engineering teams. Again, some might argue that it is not SRE, but I can easily accept that a reliable and good CI/CD and tooling for the engineering teams increases reliability of the software. There are so many use cases we can add to the deployment pipeline to increase reliability and reduce the MTTR that I can easily accept it as a form of SRE (Very important note: rollback is not just putting back the previous binary).</p>

<h2 id="team-responsible-for-keeping-the-service-running-reliably">Team responsible for keeping the service running reliably</h2>

<p>That is probably the most accepted definition of SRE. The team might be accountable or it might have a shared responsibility with the product development team. The goal is to make sure a set of principles and practices are in place across the organization that enable reliable and scalable software to run in production. It will handle incident management, identify risks and motivations, leverage SLI/SLO to continuously measure the quality of the service, policies and playbooks to handle urgent issues with a strategy and so much more.</p>

<h2 id="support-team">Support team</h2>

<p>It would be just a matter of time to see traditional approaches to software development saying they ‚Äúdo‚Äù SRE. This is the case where we take a traditional approach, like having a central team responsible and accountable for the service availability, and trying to apply some of the SRE practices (note that I didn‚Äôt say principles). This team will define SLI/SLO for the services they are managing, install a process for incident management and problem management and take advantage of automation to reduce toil. The set of practices are there, but the principles are not always there, so it will be very hard to argue whether or not this ‚Äúis‚Äù SRE.</p>

<h2 id="monitoring-team">Monitoring team</h2>

<p>Without the right tooling in place to understand and measure the production system, it will be impossible to have a reliable system. The need is so great that it is easy to assume it as part of SRE. That is why some companies end up doing SRE this way.</p>

<h2 id="conclusion">Conclusion</h2>

<p>As any new concept, some boundaries might be blurred and it is hard to define a pure form of implementing it. The culture, skills and management still will greatly define what type of SRE will be running in a given company. It is very important to know that SRE has many meanings and flourishes differently in each company, only by accepting it can we ask the questions to understand what type of SRE a company is selling you. It can even be a mix of different types.</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="SRE" /><summary type="html"><![CDATA[Companies are adopting SRE, the challenge is understanding what part of SRE they are doing - or if it is SRE at all for the purists]]></summary></entry><entry><title type="html">Continuous integration - If you don‚Äôt know what you‚Äôre doing, don‚Äôt do it</title><link href="http://localhost:4000/continuous-integration-dont-know-dont-do" rel="alternate" type="text/html" title="Continuous integration - If you don‚Äôt know what you‚Äôre doing, don‚Äôt do it" /><published>2020-10-04T13:00:00+01:00</published><updated>2020-10-04T13:00:00+01:00</updated><id>http://localhost:4000/continuous-integration-if-dont-know-dont-do</id><content type="html" xml:base="http://localhost:4000/continuous-integration-dont-know-dont-do"><![CDATA[<p><em>Continuous Integration is a software development practice where members of a team integrate their work frequently, usually each person integrates at least daily - leading to multiple integrations per day. Each integration is verified by an automated build (including test) to detect integration errors as quickly as possible. Many teams find that this approach leads to significantly reduced integration problems and allows a team to develop cohesive software more rapidly.</em> by Martin Fowler <a href="https://martinfowler.com/articles/continuousIntegration.html">here</a>.</p>

<p>We all agree with the definition of Continuous Integration from the well-known Martin Fowler. Also, we all agree with the main advantages: 1) reduce time to integrate code; 2) increase software development speed.</p>

<p>So, if we are all able to identify the advantages of this specific practice, why shouldn‚Äôt we implement it if we don‚Äôt know what we‚Äôre doing?</p>

<p>Next, I will explain why you should resist the urge to implement continuous integration before you understand what you‚Äôre doing. The key takeaway is that you should first understand how this works, understand the problems you‚Äôll find, and then invest your time implementing it. Below you can find some of the major challenges of implementing continuous integration and a few typical problems faced by all the teams who try to implement it.</p>

<h2 id="pipelines-take-too-long-on-each-source-code-integration">Pipelines take too long on each source code integration</h2>

<p>The main goal of a continuous integration pipeline is to have constant (and fast) feedback about the code you add to the source code mainline. Therefore, there is nothing more frustrating than a pipeline taking too long to run the validations.
Once you set up a CI pipeline, it‚Äôs important to constantly monitor the time to run. A rule of thumb you can adopt is to set an objective of 10 minutes to run.
This way, we avoid 1) frustrated engineers; 2) features development speed slow down and 3) a decrease in the number of merges to your source code mainline.
This last problem is particularly important to have in mind because if there are fewer merges to the mainline, there will be more problems during the merges with bigger and bigger batch sizes. This specifically could lead to outages and live problems.</p>

<h2 id="lack-of-testing-strategy">Lack of testing strategy</h2>

<p>Let me share with you one of the greatest articles about testing strategies in a microservice architecture (by Martin Fowler).
Once you start defining your testing strategy, you should answer the following questions:</p>
<ul>
  <li>Which tests will be implemented (unit tests, component tests, integration tests, etc)?</li>
  <li>In your continuous integration pipeline, when will each type of test be running?</li>
  <li>Which tests are running over real data (and other dependent services)?</li>
  <li>Which tests are running over stubbed data and mocked calls to dependent services?</li>
</ul>

<p>While answering the questions above, you should have in mind that every single decision will affect the time your pipeline will take to run and therefore impact the development team‚Äôs process and speed.</p>

<h2 id="incorrect-test-implementation-related-to-the-previous-topic">Incorrect test implementation (related to the previous topic)</h2>

<p>What I mean by ‚Äúincorrect implementation‚Äù is to have tests implemented not considering the testing strategy in place.
Let‚Äôs say that one of your guidelines in your testing strategy is after the source code compilation and run unit tests, the next test to be run should (only) use database stubs. Once there is a test that‚Äôs violating this rule, you could observe an increase in this rule violation, and this way, you‚Äôll end up with an increase of the time to run the continuous integration pipeline.
Code review is one of the most powerful tools you could use to assure the testing strategy and the corresponding guidelines are being used. By reviewing the code between the team members and more senior elements, you could take part in numerous advantages: knowledge sharing and strengthening guidelines.</p>

<h2 id="integration-environments-unstable-and-lack-of-automation">Integration environments unstable and lack of automation</h2>

<p>The main goal of testing is to find problems in your code before they hit the production environment. Therefore, you can‚Äôt afford to be constantly distracted with false positives in your pipeline. These false positives can be caused by your integration environments instability (software and/or hardware problems).
This way, you should treat this environment as a production environment. Availability, stability, and assuring that just the most recent versions of each component are installed in this environment is a set of guidelines I advise you to follow since the beginning.</p>

<p>To conclude, one important aspect is to keep these environments equal to production. Meaning, these environments should be a clone of the production environment. You must be able to mimic each use case as you were in production. Only this way you can effectively test every single scenario and this way have confidence in the new code added to the source code mainline.</p>

<p>Technical debt, team members‚Äô frustration and demotivation are problems that could emerge when facing the problems described above.</p>

<p>That said, my advice to you is to follow these steps:</p>

<ul>
  <li>Focus on the testing strategy. Which tests and when each type of tests should be implemented. Here you‚Äôll find a great presentation to guide you;</li>
  <li>Analyze all the existing tools in the market and choose the ones that better adapt to your current needs - mainly costs ($$);</li>
  <li>Focus on automating the creation of your Integration environment, assuring that there isn‚Äôt any manual work in this specific step;</li>
  <li>(Team) communication;</li>
  <li>Guidelines and code reviews are one of the best communication tools you could use in a software development team.</li>
</ul>

<p>Before you start implementing continuous integration, it isn‚Äôt mandatory to have all the answers to the mentioned challenges. Mainly, because these challenges need a lot of time and effort to implement.
The most important is to start small. Start with a proof of concept and then try to implement it in a feature of your product and/or in a specific component. And then, continue to iterate over what you build and continuously improve your continuous integration pipeline.</p>

<p>You should have in mind that every single decision will affect the development process speed, team members and their motivation. And in fact, this should be your main focus.c</p>]]></content><author><name>Ricardo Felgueiras</name></author><category term="CICD" /><summary type="html"><![CDATA[Continuous integration is a software practice adopted widely across the industry, but sometimes it is adopted and implemented without truly understand the advantanges of it and how to prevent common pitfalls. This article goes through some of those pitfalls so we can prevent doing it next time you adopt Continuous Integration.]]></summary></entry><entry><title type="html">Opinion on the paper On Designing and Deploying Internet-Scale Services</title><link href="http://localhost:4000/paper-internet-scale-services" rel="alternate" type="text/html" title="Opinion on the paper On Designing and Deploying Internet-Scale Services" /><published>2020-09-12T13:00:00+01:00</published><updated>2020-09-12T13:00:00+01:00</updated><id>http://localhost:4000/paper-internet-scale-services</id><content type="html" xml:base="http://localhost:4000/paper-internet-scale-services"><![CDATA[<p>When thinking of internet scale services we normally think of Google, Facebook and some other companies, but rarely about Microsoft.  This <a href="https://www.usenix.org/legacy/events/lisa07/tech/full_papers/hamilton/hamilton.pdf">paper</a> from 2007 (!!!) from James Hamilton is a tremendous source of information on how to run internet scale services.</p>

<p>This is 13 years old and content like ‚ÄúExpect failures‚Äù, ‚ÄúKeep things simple‚Äù and ‚Äúautomate everything‚Äù. It also points out that application design and development are normally the origin of issues in production or are best solved there, so separating development, testing and operation isn‚Äôt the most effective approach in the services world.</p>

<p>It talks about testing and release cycles. The challenge of having a fully trusted production like environment, that quality assurance in a large-scale system is a data-mining and visualisation problem and not a testing problem and so on. Talks about the investment on engineering that needs to be made to avoid problems in the future.</p>

<p>One of the topics I have some mixed feelings about is the <code class="language-plaintext highlighter-rouge">Single-server deployment</code>, mainly because I don‚Äôt totally understand what the author is suggesting here. I‚Äôm confused if he is recommending having all the components (500+ programs) in a single machine, or if he is recommending to have the ‚Äúfeature route‚Äù (customer functionality) on a single machine, or just a single program and emulated dependencies. Translating to microservices approach, having multiple services and frontend or just the service and datasources and emulate all the other dependencies. I would love to hear from the author, not sure if the https://twitter.com/jrhatmvdirona is actually the author or not.</p>

<p>Trying not to extend this too much, but the paper is really worth reading. Go and read it, you won‚Äôt regret it.</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="scale" /><summary type="html"><![CDATA[When thinking of internet scale services we normally think of Google, Facebook and some other companies, but rarely about Microsoft.]]></summary></entry><entry><title type="html">Undo changes in git</title><link href="http://localhost:4000/undo-changes-git" rel="alternate" type="text/html" title="Undo changes in git" /><published>2017-10-08T00:00:42+01:00</published><updated>2017-10-08T00:00:42+01:00</updated><id>http://localhost:4000/undo-changes-git</id><content type="html" xml:base="http://localhost:4000/undo-changes-git"><![CDATA[<p>In this article I will talk about the ways we have available to undo things when using git. I will tackle <code class="language-plaintext highlighter-rouge">git checkout</code>, <code class="language-plaintext highlighter-rouge">git reset</code>, <code class="language-plaintext highlighter-rouge">git clean</code> and <code class="language-plaintext highlighter-rouge">git revert</code>.</p>

<p>To better explain it, I would like to go to the basics about the three main sections we have on git, which are <code class="language-plaintext highlighter-rouge">Working directory</code>,  <code class="language-plaintext highlighter-rouge">Index</code> and <code class="language-plaintext highlighter-rouge">HEAD</code>.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_sections.jpg" alt="Git Sections" /></p>

<ul>
  <li>Git directory is where all the information regarding metadata and object is stored.</li>
  <li>The Index , also known as <code class="language-plaintext highlighter-rouge">staging area</code>, is a file with information about what will go into your next commit.</li>
  <li>The working directory consist of files that you are currently working on.</li>
</ul>

<p>These concepts are important, because the ways I will talk to undo changes might change different sections depending on how we use it. Any change on the working directory is considered a dangerous change, because if we delete something from the working tree that was not commited or added to stage yet, it will be lost.</p>

<p>For this article, I already have a repository with two files, a <code class="language-plaintext highlighter-rouge">README</code> and a file named <code class="language-plaintext highlighter-rouge">add_new_file</code> and I try to show how my repository is with the following image.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_image.jpg" alt="Git State" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚Üí ls
README		add_new_file
</code></pre></div></div>

<p>The current context of <code class="language-plaintext highlighter-rouge">add_new_file</code> is the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>This is the new file I want to add.
This is a new change
</code></pre></div></div>

<p>And the changes we  can see using <code class="language-plaintext highlighter-rouge">git log add_new_file</code>, which are:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚Üí git log add_new_file
commit e03d1e99a9210a1fb6d26ceb1fce93f0e795f4a6
Author: Bruno Costa &lt;yyy@yyy.com&gt;
Date:   Sun Oct 1 11:42:10 2017 +0100

    New change to the add_new_file

commit c5c7ae474a94480530059017066ac6197d0a043b
Author: Bruno Costa &lt;yyy@yyy.com&gt;
Date:   Tue Aug 22 23:35:39 2017 +0100

    Add new file
</code></pre></div></div>

<p>I will add some text to the file <code class="language-plaintext highlighter-rouge">add_new_file</code> and I will show you how you can undo that change without having to delete the change yourself.</p>

<h3 id="git-checkout">git checkout</h3>

<p>Lets start with <code class="language-plaintext highlighter-rouge">git checkout</code>. If you are using git, my guess is that you use this command often to checkout a branch to work on. This is where we use the <code class="language-plaintext highlighter-rouge">git checkout &lt;branch&gt;</code> option, where <branch> is the branch we want to work on. `git checkout` has some other options, but we want to focus on the one that allows us to undo changes we may have and not the option that switch branches.</branch></p>

<p>I will now add some text to the file <code class="language-plaintext highlighter-rouge">add_new_file</code>, something like ‚ÄúYet another change‚Äù.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_change_add_new_file_wd.jpg" alt="Git State" /></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚Üí git status
On branch new_branch
Your branch is up-to-date with 'origin/new_branch'.
Changes not staged for commit:
  (use "git add &lt;file&gt;..." to update what will be committed)
  (use "git checkout -- &lt;file&gt;..." to discard changes in working directory)

    modified:   add_new_file

no changes added to commit (use "git add" and/or "git commit -a")
</code></pre></div></div>

<p>Now, if I wanted to revert those changes without manually deleting each change I did on the file, I could use the command <code class="language-plaintext highlighter-rouge">git checkout &lt;path&gt;</code>. The <code class="language-plaintext highlighter-rouge">git checkout &lt;path&gt;</code> does not switch branches, instead it is used to restore modified or deleled path from the index. Just type <code class="language-plaintext highlighter-rouge">git checkout add_new_file</code> and check the status using <code class="language-plaintext highlighter-rouge">git status</code> and you should see that those changes are now gone.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_checkout.jpg" alt="Git State" /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚Üí git status
On branch new_branch
Your branch is up-to-date with 'origin/new_branch'.
nothing to commit, working directory clean
</code></pre></div></div>

<p>You probably also noticed that you were not asked to confirm the checkout. Please remember, this is a very dangerous command. As far as I know, there is no way to recover those changes using git.</p>

<h3 id="git-reset">git reset</h3>

<p><code class="language-plaintext highlighter-rouge">git reset</code> is used often and it‚Äôs one of those commands that can destroy work, because it affects the working tree. That said, please be careful with doing git reset with ‚Äìhard option.</p>

<h4 id="git-reset-hard">git reset ‚Äìhard</h4>

<p>Lets start by the option ‚Äìhard. I know this is not the best option to start explaining <code class="language-plaintext highlighter-rouge">git reset </code>, but since I just talked about <code class="language-plaintext highlighter-rouge">git checkout</code> I think it would be good to start with ‚Äìhard because given the same context we had on the git checkout example, the outcome will be the same.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_change_add_new_file_wd.jpg" alt="Git State" /></p>

<p>Using <code class="language-plaintext highlighter-rouge">git reset --hard</code> in this context, the outcome will be the same as using <code class="language-plaintext highlighter-rouge">git checkout add_new_file</code>, <strong>but</strong> we need to understand the internals. Instead of picking the change from Index, it will pick up from <code class="language-plaintext highlighter-rouge">HEAD</code> and it will also replace what we may have on the <code class="language-plaintext highlighter-rouge">Index</code>. Which means that if we had do <code class="language-plaintext highlighter-rouge">git add add_new_file</code> it will also reset the content of add_new_file from Index.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_reset_hard_checkout.jpg" alt="Git State" /></p>

<h4 id="git-reset-mixed">git reset ‚Äìmixed</h4>

<p>This command is the default, which means, if we don‚Äôt add anything to the <code class="language-plaintext highlighter-rouge">git reset </code> it will behave as <code class="language-plaintext highlighter-rouge">git reset --mixed</code>.</p>

<p>For this example, lets consider that we add the change we did on the <code class="language-plaintext highlighter-rouge">add_new_file</code> to <code class="language-plaintext highlighter-rouge">Index</code>.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_change_staged_add_new_file.jpg" alt="Git State" /></p>

<p>If we do <code class="language-plaintext highlighter-rouge">git reset --mixed</code> or <code class="language-plaintext highlighter-rouge">git reset</code> it will replace the content we have on <code class="language-plaintext highlighter-rouge">Index</code>, but it will not replace anything on the working directory.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_reset_mixed.jpg" alt="Git State" /></p>

<h4 id="git-reset-soft">git reset ‚Äìsoft</h4>

<p>One thing I didn‚Äôt tell you is that you can indicate a commit to do the reset. That will first update the HEAD to the given commit and if we use <code class="language-plaintext highlighter-rouge">--soft</code> it will be all that it would do.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_reset_soft.jpg" alt="Git State" /></p>

<p>Summing up, it will first update the HEAD to the given commit, if <code class="language-plaintext highlighter-rouge">--mixed</code> it will also update the <code class="language-plaintext highlighter-rouge">Index</code> or it will also update the working directory if we use <code class="language-plaintext highlighter-rouge">--hard</code>.</p>

<h3 id="git-clean">git clean</h3>

<p>This command is useful to remove those files that are not tracked, as an example, we can imagine adding a wrong file and we want to clean up the working directory. We can also use <code class="language-plaintext highlighter-rouge">-x</code> option to remove those files that are ignored (.gitignore), which is useful to remove <code class="language-plaintext highlighter-rouge">bin</code> folders for example.</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_clean.jpg" alt="Git Clean" /></p>

<h3 id="git-revert">git revert</h3>

<p>Last, but not least, <code class="language-plaintext highlighter-rouge">git revert</code>. All the options we‚Äôve looked at so far just erase changes we did, without recording the action itself. This command is different, this command allows us to revert changes already committed, without changing the history of repository, but adding a new commit with the revert.</p>

<p>I can think of one good reason to use this command, imagine that we introduce a change with performance issues. We want to revert that change, but we want to keep that revert in our repository, to explain why we did it and because the history should tell the life story of a repository. However, if we find ourselves using <code class="language-plaintext highlighter-rouge">git revert</code> too often before a release, we might need to change our workflow.</p>

<p>I will use the revert to remove the changes I did on commit <code class="language-plaintext highlighter-rouge">e03d1e9</code>. <code class="language-plaintext highlighter-rouge">git revert e03d1e9</code> and it will ask me for a commit message and I will use something like</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    Revert "New change to the add_new_file"

    After starting the canary release, we started noticing some performance issues with
    this change.

    This reverts commit e03d1e99a9210a1fb6d26ceb1fce93f0e795f4a6.
</code></pre></div></div>

<p>After I save it, if I go to <code class="language-plaintext highlighter-rouge">git log</code> I will see my new commit there.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>‚Üí git log --pretty=format:"%h %an: %s"
0dbcaef Bruno Costa: Revert "New change to the add_new_file"
e03d1e9 Bruno Costa: New change to the add_new_file
c5c7ae4 Bruno Costa: Add new file
de4fc88 Bruno Costa: Add README
</code></pre></div></div>

<p>Trying to translate it into an image, it would be something like this:</p>

<p><img src="http://localhost:4000/assets/img/posts/2017.09.05/git_revert.jpg" alt="Git Revert" /></p>

<p>I hope you enjoyed the article, if you have any questions or suggestions, feel free to comment. Thanks!</p>]]></content><author><name>Bruno Costa</name><email>bcosta10@gmail.com</email></author><category term="tutorials" /><category term="git" /><summary type="html"><![CDATA[Undoing changes is a little scary, right? I hope this article helps you to keep calm when you need to undo stuff.]]></summary></entry></feed>