<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>throw new exception();</title>
    <description>Blog about scalable software, personal opinion on software design and remember... throw a new exception once in a while.
</description>
    <link>http://127.0.0.1:4000/</link>
    <atom:link href="http://127.0.0.1:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Tue, 09 Feb 2016 17:46:51 +0000</pubDate>
    <lastBuildDate>Tue, 09 Feb 2016 17:46:51 +0000</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Consumer-driven contracts with Pact</title>
        <description>&lt;p&gt;what is consumer-driven contracts and why is it important?&lt;/p&gt;

&lt;p&gt;Quando usamos uma arquitectura baseada em serviços, a nossa capacidade de lançar serviços individualmente é limitada pelas dependências entre os serviços. Quando queremos fazer continuous delivery, queremos lançar as aplicações de forma independente, isto é importante por vários motivos, entre os quais:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Confiar mais nas releases, como estamos a reduzir o tamanho da release, o risco associado diminui. Como os scripts de deployment têm de ser testados várias vezes durante o processo antes do código entrar em produção, a maior parte dos erros no processo e no script são detectados antes do código entrar em produção.&lt;/li&gt;
  &lt;li&gt;Como confiamos mais nas releases, podemos lançar mais vezes e mais cedo, isto irá permitir um time to market mais rápido e obter o feedback do utilizador mais cedo para melhorar o produto o mais cedo possível&lt;/li&gt;
  &lt;li&gt;Ao melhorar o nosso produto mais cedo, com base no feedback do utilizador, atingimos uma melhor satisfação do cliente.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Por exemplo, vamos imaginar que temos um Catalog Service e um Inventory Service.
&lt;img src=&quot;http://127.0.0.1:4000/images/cdc1.jpg&quot; alt=&quot;My helpful screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Coupled releases.
End-to-end testing.&lt;/p&gt;

&lt;p&gt;How can we enable the independent evolution of interdependent applications with minimal risk?&lt;/p&gt;

&lt;p&gt;what is pact
How does it work
Integrated tests
   Why is developing and testing with Pact better than using traditional system integration tests?
Pact broker
Usage - an example scenario&lt;/p&gt;

&lt;p&gt;support&lt;/p&gt;
</description>
        <pubDate>Tue, 09 Feb 2016 00:00:00 +0000</pubDate>
        <link>http://127.0.0.1:4000/2016/02/09/consumerdriven-contracts-with-pact.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/2016/02/09/consumerdriven-contracts-with-pact.html</guid>
        
        
      </item>
    
      <item>
        <title>Not every if--then-else statement, needs the	 else</title>
        <description>&lt;p&gt;As a software engineer, I have the opportunity to review a lot of code from other engineers. One thing that makes me happy is that the number of people doing a defensive code is growing, but there is still room for improvement.&lt;/p&gt;

&lt;p&gt;One thing that amuses me is the quantity of people doing the following piece of code.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;divisor&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Divide by zero is not allowed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;First the good things. The developer is doing a defensive code, validating the input arguments and throwing an informative exception.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;But, do we really need the else here? &lt;/b&gt;&lt;/p&gt;

&lt;p&gt;The if-then-else statement exists to perform some action based on a condition. If the condition is true, the statements following the “then” are executed, otherwise it will continue to the “else” block and after this brach we’ll have an “interception” point on the flow. However, one of our branches is an exit point, we don’t want an interception happening after the “if-then-else” statement, we want the code to exit the method if the first condition is true.&lt;/p&gt;

&lt;p&gt;Resuming, no, we don’t need the else there. Changing our code to remove the unnecessary else the code will looks like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-csharp&quot; data-lang=&quot;csharp&quot;&gt;&lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ArgumentOutOfRangeException&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;divisor&quot;&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Divide by zero is not allowed&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;divisor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;b&gt;But, its just a detail…&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;At first, this seems to be just a little thing that doesn’t really matter, but what if we add more and more logic into the code without refactoring it? Have you thought about the maintainability problem that we might have in the future?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Where is this coming from?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;I have a theory about why developers are still doing this. When learning how to program, we normally are taught the if-then-else statement before any learning on defensive code. As we practice our skills, we are doing more and more if-then-else statements until it becomes intrinsic in our brain and we do it without thinking. The problem is that we need to think to write a clean code.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;How can we stop doing it?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Everytime you have a code review, or change some code from another engineer, please check for code like this and alert your colleague for this. He will be grateful.&lt;/p&gt;
</description>
        <pubDate>Fri, 03 Apr 2015 01:00:42 +0100</pubDate>
        <link>http://127.0.0.1:4000/code/clean/2015/04/03/stop-doing-if-return-else.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/code/clean/2015/04/03/stop-doing-if-return-else.html</guid>
        
        
        <category>code</category>
        
        <category>clean</category>
        
      </item>
    
      <item>
        <title>The art of coding</title>
        <description>&lt;p&gt;Have you even felt it’s really hard to explain what a software engineer does for living? Have you even felt boring someone explaining what a software engineer does? If you have answer yes for any of the questions, welcome to the club.&lt;/p&gt;

&lt;p&gt;When I started studying computer engineering, here in Portugal, not everyone had a personal computer and a lot of people not much older than me, had real issues working with computers. For example, they didn’t know how to turn on the computer. Yeah! That much.&lt;/p&gt;

&lt;p&gt;Back on those days, trying to explain to a friend, what I was studying was really hard, not only because I had to idea what software engineering exactly was, but also, because &lt;a href=&quot;https://www.reddit.com/r/AskMen/comments/1wxzkx/why_does_programming_have_so_many_negative/&quot;&gt;programming have so many negative stereotype&lt;/a&gt; and for a bunch of reasons, a lot of people just don’t enjoy to be around a software engineer or a someone with a nerd personality. I felt that people that didn’t know me that well, looked at me differently after I told what I was studying and I sincerely believe it was because of the stereotypes around software engineers. Those stereotypes create a barrier on the communication between people and you need more time to get the “normal” look from those people again.&lt;/p&gt;

&lt;p&gt;I feel sad because of it, but I think it doesn’t have to do with the other person, but we cannot find an expression to transform software development in a non-boring activity. Let’s be honest, you have plenty of cool TV shows about doctors (House, Grey Anatomy, etc), about lawyers (Suits, How to get away with murderer, etc), about detectives, policemen, etc. But about software engineering we don’t have much and the ones that exist, I think only software related staff watches them. It’s boring.&lt;/p&gt;

&lt;p&gt;If it’s hard for someone as creative as a TV shows writer, how to answer the question with some glamour and creativity?&lt;/p&gt;

&lt;p&gt;&lt;b&gt;What do we do for living?&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;We are software engineers. Some of us create apps, others backend services to support those apps or websites. Think about Facebook, Skype, Twitter, Linkedin, etc… million of people using their technology day after day. Isn’t it amazing? Does it look boring? Changing people life. Changing the world. Changing the way people communicate. Changing the way people buy. Writing code is an art. It might not be one-person show as it is creating a new piece of melody or writing a book, but it is art. Art created by one or million of software engineers.&lt;/p&gt;

&lt;p&gt;Again, think about Facebook, Skype, Twitter, Linkedin, etc… Millions of unknown artists… giving you art, everyday.&lt;/p&gt;

&lt;p&gt;Does it sounds boring? I don’t think so.&lt;/p&gt;

</description>
        <pubDate>Wed, 01 Apr 2015 01:00:42 +0100</pubDate>
        <link>http://127.0.0.1:4000/coding/2015/04/01/the-art-of-coding.html</link>
        <guid isPermaLink="true">http://127.0.0.1:4000/coding/2015/04/01/the-art-of-coding.html</guid>
        
        
        <category>coding</category>
        
      </item>
    
  </channel>
</rss>
